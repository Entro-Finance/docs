openapi: 3.0.3
info:
  title: Entro Finance API
  description: |
    Professional crypto card platform built on Solana blockchain infrastructure. Enable seamless conversion from digital assets to traditional payment methods through Visa and Mastercard networks.
    
    ## Authentication
    All API requests require authentication using API keys in the Authorization header:
    ```
    Authorization: Bearer sk_live_your_api_key_here
    ```
    
    ## Base URL
    Production: `https://api.entrofinance.com`
    Sandbox: `https://sandbox-api.entrofinance.com`
    
    ## Rate Limits
    - Basic: 100 requests/minute, 10,000/day
    - Professional: 1,000 requests/minute, 100,000/day  
    - Enterprise: 10,000 requests/minute, 1,000,000/day
    
    ## Error Codes
    - 400: Bad Request - Invalid parameters
    - 401: Unauthorized - Invalid API key
    - 403: Forbidden - Insufficient permissions
    - 404: Not Found - Resource not found
    - 429: Rate Limited - Too many requests
    - 500: Server Error - Internal server error
  version: 2.1.0
  contact:
    name: Entro Finance API Support
    url: https://entrofinance.com/support
    email: api@entrofinance.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.entrofinance.com
    description: Production server
  - url: https://sandbox-api.entrofinance.com
    description: Sandbox server

security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: API Key

  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Human readable error message
            details:
              type: object
              description: Additional error details

    ApiKey:
      type: object
      required:
        - id
        - name
        - keyHash
        - permissions
        - createdAt
        - status
      properties:
        id:
          type: string
          description: Unique API key identifier
          example: "key_7b8a9c0d1e2f3456"
        name:
          type: string
          description: API key name
          example: "Production API Key"
        keyHash:
          type: string
          description: Masked API key
          example: "sk_live_...f3456"
        permissions:
          type: array
          items:
            type: string
          description: Array of permissions
          example: ["cards:read", "cards:write", "transactions:read"]
        lastUsed:
          type: string
          format: date-time
          description: Last usage timestamp
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        expiresAt:
          type: string
          format: date-time
          description: Expiration timestamp
        status:
          type: string
          enum: [active, expired, revoked]
          description: API key status

    Card:
      type: object
      required:
        - id
        - type
        - currency
        - name
        - status
        - cardNumber
        - expiryDate
        - balance
        - limits
        - network
        - createdAt
      properties:
        id:
          type: string
          description: Unique card identifier
          example: "card_9d1e2f3a4b5c6789"
        type:
          type: string
          enum: [virtual, physical]
          description: Card type
        currency:
          type: string
          enum: [USD, EUR, GBP]
          description: Card currency
        name:
          type: string
          description: Card display name
          example: "My Crypto Card"
        status:
          type: string
          enum: [active, frozen, expired, cancelled, pending]
          description: Card status
        walletAddress:
          type: string
          description: Associated Solana wallet address
          example: "7xKXtg2CW87d97wDnTU5w4a2n3xZp6NV2aJ8r9G4qH3m"
        cardNumber:
          type: string
          description: Masked card number
          example: "4532********1234"
        expiryDate:
          type: string
          description: Card expiry date
          example: "12/27"
        balance:
          $ref: '#/components/schemas/Balance'
        limits:
          $ref: '#/components/schemas/CardLimits'
        network:
          type: string
          enum: [visa, mastercard]
          description: Card network
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp

    Balance:
      type: object
      required:
        - available
        - pending
        - currency
      properties:
        available:
          type: number
          format: decimal
          description: Available balance
          example: 1250.75
        pending:
          type: number
          format: decimal
          description: Pending balance
          example: 25.00
        reserved:
          type: number
          format: decimal
          description: Reserved balance
          example: 0.00
        currency:
          type: string
          enum: [USD, EUR, GBP]
          description: Balance currency

    CardLimits:
      type: object
      required:
        - daily
        - monthly
        - perTransaction
        - dailyRemaining
        - monthlyRemaining
      properties:
        daily:
          type: number
          format: decimal
          description: Daily spending limit
          example: 2000.00
        monthly:
          type: number
          format: decimal
          description: Monthly spending limit
          example: 10000.00
        perTransaction:
          type: number
          format: decimal
          description: Per-transaction limit
          example: 1000.00
        dailyRemaining:
          type: number
          format: decimal
          description: Remaining daily limit
          example: 750.25
        monthlyRemaining:
          type: number
          format: decimal
          description: Remaining monthly limit
          example: 8749.25

    Transaction:
      type: object
      required:
        - id
        - type
        - status
        - amount
        - currency
        - createdAt
      properties:
        id:
          type: string
          description: Unique transaction identifier
          example: "tx_7b8a9c0d1e2f3456"
        type:
          type: string
          enum: [payment, funding, withdrawal, refund, fee, reward]
          description: Transaction type
        status:
          type: string
          enum: [pending, completed, failed, cancelled, declined]
          description: Transaction status
        amount:
          type: number
          format: decimal
          description: Transaction amount
          example: 45.99
        currency:
          type: string
          enum: [USD, EUR, GBP]
          description: Transaction currency
        cardId:
          type: string
          description: Associated card ID
          example: "card_9d1e2f3a4b5c6789"
        merchant:
          $ref: '#/components/schemas/Merchant'
        metadata:
          $ref: '#/components/schemas/TransactionMetadata'
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp

    Merchant:
      type: object
      properties:
        name:
          type: string
          description: Merchant name
          example: "Coffee Shop Downtown"
        category:
          type: string
          description: Merchant category
          example: "food_and_beverage"
        mcc:
          type: string
          description: Merchant Category Code
          example: "5812"
        city:
          type: string
          description: Merchant city
          example: "New York"
        country:
          type: string
          description: Merchant country code
          example: "US"

    TransactionMetadata:
      type: object
      properties:
        solanaSignature:
          type: string
          description: Solana transaction signature
          example: "4xK8mP9nL7eD2cF5bG1hR6tY3wA8sE4qZ9xV0oI3jU7nM2lK5pQ6rT1yH8fN4gB7"
        blockHeight:
          type: integer
          description: Solana block height
          example: 245678901
        slot:
          type: integer
          description: Solana slot number
          example: 245678901
        confirmations:
          type: integer
          description: Number of confirmations
          example: 32

    PaymentPlan:
      type: object
      required:
        - id
        - name
        - type
        - price
        - currency
        - features
        - status
      properties:
        id:
          type: string
          description: Unique plan identifier
          example: "plan_premium_2024"
        name:
          type: string
          description: Plan name
          example: "Premium Card Plan"
        type:
          type: string
          enum: [basic, premium, enterprise]
          description: Plan tier
        price:
          type: number
          format: decimal
          description: Monthly price
          example: 29.99
        currency:
          type: string
          enum: [USD, EUR, GBP]
          description: Price currency
        features:
          type: array
          items:
            type: string
          description: Plan features
          example: ["Unlimited virtual cards", "Physical card included", "Priority support"]
        limits:
          type: object
          properties:
            cardsAllowed:
              type: integer
              description: Maximum cards allowed
            monthlyVolume:
              type: number
              format: decimal
              description: Monthly transaction volume limit
            apiRequests:
              type: integer
              description: Monthly API request limit
        status:
          type: string
          enum: [active, inactive, deprecated]
          description: Plan availability status

    Tool:
      type: object
      required:
        - id
        - name
        - type
        - status
        - createdAt
      properties:
        id:
          type: string
          description: Unique tool identifier
          example: "tool_7b8a9c0d1e2f3456"
        name:
          type: string
          description: Tool name
          example: "Card Balance Checker"
        description:
          type: string
          description: Tool description
        type:
          type: string
          enum: [payment, analytics, security, utility]
          description: Tool category
        version:
          type: string
          description: Tool version
          example: "1.2.0"
        status:
          type: string
          enum: [active, inactive, deprecated]
          description: Tool status
        isPublic:
          type: boolean
          description: Whether tool is publicly available
        parameters:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              required:
                type: boolean
              description:
                type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastUsed:
          type: string
          format: date-time

    Toolkit:
      type: object
      required:
        - id
        - name
        - isPublic
        - tools
        - createdAt
      properties:
        id:
          type: string
          description: Unique toolkit identifier
          example: "toolkit_7b8a9c0d1e2f3456"
        name:
          type: string
          description: Toolkit name
          example: "Card Management Suite"
        description:
          type: string
          description: Toolkit description
        isPublic:
          type: boolean
          description: Public visibility
        userId:
          type: string
          description: Owner user ID
        tools:
          type: array
          items:
            $ref: '#/components/schemas/Tool'
        inputs:
          type: array
          items:
            type: string
          description: Required input parameters
        envVariables:
          type: object
          description: Environment variables
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
        lastUsedAt:
          type: string
          format: date-time

    TaskRun:
      type: object
      required:
        - id
        - runId
        - status
        - createdAt
        - type
      properties:
        id:
          type: string
          description: Unique run identifier
          example: "run_7b8a9c0d1e2f3456"
        runId:
          type: string
          description: External run identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        type:
          type: string
          enum: [sync, async]
          description: Execution type
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
          description: Run status
        input:
          type: object
          description: Input parameters for the run
        output:
          type: object
          description: Run output data
        error:
          type: string
          description: Error message if failed
        duration:
          type: integer
          description: Execution duration in milliseconds
        creditsUsed:
          type: number
          format: decimal
          description: Credits consumed by this run
        createdAt:
          type: string
          format: date-time

paths:
  # API Keys Management
  /api/keys:
    get:
      tags:
        - API Keys
      summary: Get API keys
      description: Retrieve all API keys for the authenticated user with pagination and filtering options
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
        - name: status
          in: query
          description: Filter keys by status
          schema:
            type: string
            enum: [active, expired, revoked]
      responses:
        '200':
          description: List of API keys retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKeys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 25
                      total:
                        type: integer
                        example: 150
                      totalPages:
                        type: integer
                        example: 6

    post:
      tags:
        - API Keys
      summary: Post API keys
      description: Create a new API key with specified permissions and optional expiration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - permissions
              properties:
                name:
                  type: string
                  description: Descriptive name for the API key
                  example: "Production Card Management"
                  minLength: 1
                  maxLength: 100
                permissions:
                  type: array
                  items:
                    type: string
                  description: Array of permission scopes
                  example: ["cards:read", "cards:write", "transactions:read", "webhooks:write"]
                  minItems: 1
                expiresIn:
                  type: string
                  description: Expiration period
                  example: "1y"
                  enum: ["30d", "90d", "1y", "never"]
                  default: "1y"
                description:
                  type: string
                  description: Optional description for the API key
                  maxLength: 500
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    allOf:
                      - $ref: '#/components/schemas/ApiKey'
                      - type: object
                        properties:
                          key:
                            type: string
                            description: Full API key value (only returned once)
                            example: "sk_live_1234567890abcdef..."

    put:
      tags:
        - API Keys
      summary: Put API keys
      description: Update an existing API key's permissions and settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - keyId
              properties:
                keyId:
                  type: string
                  description: API key identifier to update
                  example: "key_7b8a9c0d1e2f3456"
                name:
                  type: string
                  description: Updated name for the API key
                  maxLength: 100
                permissions:
                  type: array
                  items:
                    type: string
                  description: Updated permission scopes
                  example: ["cards:read", "transactions:read"]
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    $ref: '#/components/schemas/ApiKey'
                  message:
                    type: string
                    example: "API key updated successfully"

  /api/keys/{keyId}:
    delete:
      tags:
        - API Keys
      summary: Delete API keys
      description: Permanently revoke and delete an API key
      parameters:
        - name: keyId
          in: path
          required: true
          description: Unique identifier of the API key to delete
          schema:
            type: string
            example: "key_7b8a9c0d1e2f3456"
      responses:
        '200':
          description: API key deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "API key deleted successfully"
                  deletedAt:
                    type: string
                    format: date-time
                    example: "2024-03-20T10:30:00Z"

  /api/keys/bulk-revoke:
    post:
      tags:
        - API Keys
      summary: Post API keys bulk revoke
      description: Revoke multiple API keys simultaneously
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - keyIds
              properties:
                keyIds:
                  type: array
                  items:
                    type: string
                  description: Array of API key IDs to revoke
                  example: ["key_7b8a9c0d1e2f3456", "key_8c9d0e1f2a3b4567"]
                  minItems: 1
                  maxItems: 50
      responses:
        '200':
          description: Bulk revocation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  revokedCount:
                    type: integer
                    example: 5
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        keyId:
                          type: string
                        status:
                          type: string
                          enum: [revoked, failed, not_found]

  # User Transactions
  /api/transactions/credits:
    get:
      tags:
        - User Transactions
      summary: Get API transactions credits
      description: Retrieve current user credit balance and transaction history
      responses:
        '200':
          description: Credit information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: decimal
                    example: 2500.75
                  currency:
                    type: string
                    example: "USD"

  /api/transactions:
    get:
      tags:
        - User Transactions
      summary: Get API transactions
      description: Retrieve comprehensive transaction history with advanced filtering
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 200
        - name: cardId
          in: query
          description: Filter by specific card ID
          schema:
            type: string
      responses:
        '200':
          description: Transaction list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'

  # External Payment Integrations - Coinbase
  /api/transactions/coinbase/charge:
    post:
      tags:
        - Coinbase
      summary: Post API transactions Coinbase charge
      description: Create a Coinbase Commerce charge for card funding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - currency
                - cardId
              properties:
                amount:
                  type: number
                  format: decimal
                  description: Amount to charge
                  example: 100.00
                currency:
                  type: string
                  enum: [USD, EUR, GBP]
                cardId:
                  type: string
                  example: "card_9d1e2f3a4b5c6789"
      responses:
        '201':
          description: Coinbase charge created successfully

  /api/transactions/coinbase/poll:
    post:
      tags:
        - Coinbase
      summary: Post API transactions Coinbase poll
      description: Poll Coinbase charge status and update transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chargeId
              properties:
                chargeId:
                  type: string
                  example: "pay_7b8a9c0d1e2f3456"
      responses:
        '200':
          description: Charge status retrieved successfully

  /api/transactions/coinbase/pending:
    get:
      tags:
        - Coinbase
      summary: Get API transactions Coinbase pending
      description: Retrieve all pending Coinbase transactions
      responses:
        '200':
          description: Pending transactions retrieved successfully

  # Payment Plans
  /api/transactions/plans:
    get:
      tags:
        - Payment Plans
      summary: Get API transactions plans
      description: List all available payment plans
      responses:
        '200':
          description: Payment plans retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaymentPlan'

  /api/transactions/active-plan:
    get:
      tags:
        - Payment Plans
      summary: Get API transactions active plan
      description: Get current user's active payment plan
      responses:
        '200':
          description: Active plan retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan:
                    $ref: '#/components/schemas/PaymentPlan'
                  subscription:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [active, cancelled, expired]
                      renewsAt:
                        type: string
                        format: date-time

  # Runs
  /api/run:
    get:
      tags:
        - Runs
      summary: Get API run
      description: List all task runs with filtering options
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, running, completed, failed]
        - name: type
          in: query
          schema:
            type: string
            enum: [sync, async]
      responses:
        '200':
          description: Runs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  runs:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskRun'

  /api/run/{runId}:
    get:
      tags:
        - Runs
      summary: Get API run by ID
      description: Get detailed information about a specific run
      parameters:
        - name: runId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Run details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskRun'

  /api/run/sync:
    post:
      tags:
        - Runs
      summary: Post API run sync
      description: Execute a synchronous task run
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - toolId
              properties:
                toolId:
                  type: string
                  example: "tool_7b8a9c0d1e2f3456"
                input:
                  type: object
                  description: Input parameters for the tool
      responses:
        '200':
          description: Synchronous run completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskRun'

  /api/run/async:
    post:
      tags:
        - Runs
      summary: Post API run async
      description: Execute an asynchronous task run
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - toolId
              properties:
                toolId:
                  type: string
                  example: "tool_7b8a9c0d1e2f3456"
                input:
                  type: object
      responses:
        '202':
          description: Asynchronous run started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskRun'

  # Tools
  /api/tools:
    get:
      tags:
        - Tools
      summary: Get API tools
      description: List all available tools
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [payment, analytics, security, utility]
        - name: isPublic
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Tools retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tools:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tool'

    post:
      tags:
        - Tools
      summary: Post API tools
      description: Create a new tool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  type: string
                  example: "Card Balance Checker"
                description:
                  type: string
                type:
                  type: string
                  enum: [payment, analytics, security, utility]
                parameters:
                  type: array
                  items:
                    type: object
      responses:
        '201':
          description: Tool created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'

  /api/tools/{toolId}:
    get:
      tags:
        - Tools
      summary: Get API tools by ID
      description: Get detailed information about a specific tool
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tool details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'

    delete:
      tags:
        - Tools
      summary: Delete API tools
      description: Delete a specific tool
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tool deleted successfully

    patch:
      tags:
        - Tools
      summary: Patch API tools
      description: Update a specific tool
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [active, inactive, deprecated]
      responses:
        '200':
          description: Tool updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'

  /api/tools/{toolId}/public:
    patch:
      tags:
        - Tools
      summary: Patch API tools public
      description: Toggle tool public visibility
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isPublic
              properties:
                isPublic:
                  type: boolean
      responses:
        '200':
          description: Tool visibility updated successfully

  /api/tools/{toolId}/execute/sync:
    post:
      tags:
        - Tools
      summary: Post API tools execute sync
      description: Execute tool synchronously
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: object
      responses:
        '200':
          description: Tool executed successfully

  /api/tools/{toolId}/execute/async:
    post:
      tags:
        - Tools
      summary: Post API tools execute async
      description: Execute tool asynchronously
      parameters:
        - name: toolId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: object
      responses:
        '202':
          description: Tool execution started

  # Toolkits
  /api/toolkit:
    get:
      tags:
        - Toolkits
      summary: Get API toolkit
      description: List all toolkits
      parameters:
        - name: private
          in: query
          description: Filter toolkits by visibility
          schema:
            type: boolean
      responses:
        '200':
          description: Toolkits retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  toolkits:
                    type: array
                    items:
                      $ref: '#/components/schemas/Toolkit'

    post:
      tags:
        - Toolkits
      summary: Post API toolkit
      description: Create a new toolkit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Card Management Suite"
                description:
                  type: string
                isPublic:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Toolkit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toolkit'

  /api/toolkit/{toolkitId}:
    get:
      tags:
        - Toolkits
      summary: Get API toolkit by ID
      description: Get detailed information about a specific toolkit
      parameters:
        - name: toolkitId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Toolkit details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toolkit'

    delete:
      tags:
        - Toolkits
      summary: Delete API toolkit
      description: Delete a specific toolkit
      parameters:
        - name: toolkitId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Toolkit deleted successfully

    patch:
      tags:
        - Toolkits
      summary: Patch API toolkit
      description: Update a specific toolkit
      parameters:
        - name: toolkitId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Toolkit updated successfully

  /api/toolkit/{toolkitId}/tools:
    post:
      tags:
        - Toolkits
      summary: Post API toolkit tools
      description: Add tools to a toolkit
      parameters:
        - name: toolkitId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - toolIds
              properties:
                toolIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Tools added to toolkit successfully

    delete:
      tags:
        - Toolkits
      summary: Delete API toolkit tools
      description: Remove tools from a toolkit
      parameters:
        - name: toolkitId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - toolIds
              properties:
                toolIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Tools removed from toolkit successfully

  /api/toolkit/{toolkitId}/clone:
    post:
      tags:
        - Toolkits
      summary: Post API toolkit clone
      description: Clone an existing toolkit
      parameters:
        - name: toolkitId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name for the cloned toolkit
      responses:
        '201':
          description: Toolkit cloned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toolkit'

  /api/toolkit/{toolkitId}/public:
    patch:
      tags:
        - Toolkits
      summary: Patch API toolkit public
      description: Toggle toolkit public visibility
      parameters:
        - name: toolkitId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isPublic
              properties:
                isPublic:
                  type: boolean
      responses:
        '200':
          description: Toolkit visibility updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toolkit'

  /api/toolkit/{toolkitId}/execute/sync:
    post:
      tags:
        - Toolkits
      summary: Post API toolkit execute sync
      description: Execute toolkit synchronously
      parameters:
        - name: toolkitId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: object
      responses:
        '200':
          description: Toolkit executed successfully

  /api/toolkit/{toolkitId}/execute/async:
    post:
      tags:
        - Toolkits
      summary: Post API toolkit execute async
      description: Execute toolkit asynchronously
      parameters:
        - name: toolkitId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: object
      responses:
        '202':
          description: Toolkit execution started

  # Referrals
  /api/referrals/track-visit:
    post:
      tags:
        - Referrals
      summary: Post API referrals track visit
      description: Track a referral visit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - referralCode
              properties:
                referralCode:
                  type: string
                  example: "ENTRO2024"
                metadata:
                  type: object
                  properties:
                    userAgent:
                      type: string
                    ipAddress:
                      type: string
                    source:
                      type: string
      responses:
        '200':
          description: Visit tracked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  visitId:
                    type: string
                  referral:
                    type: object
                    properties:
                      code:
                        type: string
                      reward:
                        type: object

  /api/referrals/stats:
    get:
      tags:
        - Referrals
      summary: Get API referrals stats
      description: Get referral statistics for the authenticated user
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: 30d
      responses:
        '200':
          description: Referral statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalVisits:
                    type: integer
                    example: 150
                  totalConversions:
                    type: integer
                    example: 25
                  conversionRate:
                    type: number
                    format: decimal
                    example: 16.67
                  totalEarnings:
                    type: number
                    format: decimal
                    example: 250.00
                  currency:
                    type: string
                    example: "USD"

  /api/referrals/code:
    get:
      tags:
        - Referrals
      summary: Get API referrals code
      description: Get user's referral code information
      responses:
        '200':
          description: Referral code information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "ENTRO2024"
                  url:
                    type: string
                    format: uri
                    example: "https://entrofinance.com/signup?ref=ENTRO2024"
                  status:
                    type: string
                    enum: [active, inactive, expired]
                  reward:
                    type: object
                    properties:
                      amount:
                        type: number
                        format: decimal
                        example: 10.00
                      currency:
                        type: string
                        example: "USD"
                      type:
                        type: string
                        enum: [credit, cash, percentage]

  /api/referrals/associate-user:
    post:
      tags:
        - Referrals
      summary: Post API referrals associate user
      description: Associate a new user with a referral code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - referralCode
                - userId
              properties:
                referralCode:
                  type: string
                  example: "ENTRO2024"
                userId:
                  type: string
                  example: "user_7b8a9c0d1e2f3456"
                conversionType:
                  type: string
                  enum: [signup, first_card, first_transaction]
                  example: "signup"
      responses:
        '200':
          description: User associated with referral successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  referralId:
                    type: string
                  rewardEarned:
                    type: object
                    properties:
                      amount:
                        type: number
                        format: decimal
                      currency:
                        type: string

tags:
  - name: API Keys
    description: API key and authentication management
  - name: User Transactions
    description: Transaction history and credit management
  - name: Coinbase
    description: Coinbase Commerce payment integration
  - name: Payment Plans
    description: Subscription plan management
  - name: Runs
    description: Task execution and monitoring
  - name: Tools
    description: Individual tool management and execution
  - name: Toolkits
    description: Tool collection management and execution
  - name: Referrals
    description: Referral program management and tracking