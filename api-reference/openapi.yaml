openapi: 3.0.0
info:
  title: Entro Finance API
  description: |
    Welcome to the Entro Finance API documentation. 
    
    This API provides access to Entro Finance's payment processing, card management, and financial services.
    
    ## Authentication
    All API requests require authentication using Bearer tokens.
    
    ## Rate Limiting
    API requests are limited to 1000 requests per hour per API key.
  version: 1.0.0
  contact:
    name: Entro Finance API Support
    url: https://entro.finance/support
    email: api@entro.finance
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://api.entro.finance/v1
    description: Production server
  - url: https://staging-api.entro.finance/v1
    description: Staging server
  - url: https://sandbox-api.entro.finance/v1
    description: Sandbox server
paths:
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check if the API is running and healthy
      operationId: getHealth
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  
  /cards:
    get:
      tags:
        - Cards
      summary: List user cards
      description: Retrieve a list of all cards associated with the authenticated user
      operationId: listCards
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter cards by status
          required: false
          schema:
            type: string
            enum: [active, inactive, blocked, expired]
        - name: limit
          in: query
          description: Number of cards to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of cards to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of cards retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
    
    post:
      tags:
        - Cards
      summary: Create a new card
      description: Request a new Entro Finance card for the authenticated user
      operationId: createCard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '201':
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
  
  /cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Get card details
      description: Retrieve detailed information about a specific card
      operationId: getCard
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          description: Unique identifier for the card
          schema:
            type: string
            example: "card_123abc456def"
      responses:
        '200':
          description: Card details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
    
    patch:
      tags:
        - Cards
      summary: Update card
      description: Update card settings and preferences
      operationId: updateCard
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          description: Unique identifier for the card
          schema:
            type: string
            example: "card_123abc456def"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardRequest'
      responses:
        '200':
          description: Card updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
  
  /transactions:
    get:
      tags:
        - Transactions
      summary: List transactions
      description: Retrieve transaction history for the authenticated user
      operationId: listTransactions
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          description: Filter transactions by card ID
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date for transaction search (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date for transaction search (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: status
          in: query
          description: Filter by transaction status
          required: false
          schema:
            type: string
            enum: [pending, completed, failed, cancelled]
        - name: limit
          in: query
          description: Number of transactions to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of transactions to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Transaction list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
  
  /entro/balance:
    get:
      tags:
        - ENTRO Token
      summary: Get ENTRO token balance
      description: Retrieve the current ENTRO token balance for the authenticated user
      operationId: getEntroBalance
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ENTRO balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntroBalanceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
  
  /entro/rewards:
    get:
      tags:
        - ENTRO Token
      summary: Get reward history
      description: Retrieve ENTRO token rewards earned through transactions
      operationId: getEntroRewards
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          description: Start date for reward search (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date for reward search (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Reward history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntroRewardsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        version:
          type: string
          example: "1.0.0"
    
    Card:
      type: object
      properties:
        id:
          type: string
          description: Unique card identifier
          example: "card_123abc456def"
        status:
          type: string
          enum: [active, inactive, blocked, expired]
          description: Current card status
          example: "active"
        type:
          type: string
          enum: [virtual, physical]
          description: Card type
          example: "virtual"
        last4:
          type: string
          description: Last 4 digits of card number
          example: "1234"
        expiryMonth:
          type: integer
          description: Card expiry month (1-12)
          example: 12
        expiryYear:
          type: integer
          description: Card expiry year
          example: 2027
        currency:
          type: string
          description: Card currency (ISO 4217)
          example: "USD"
        balance:
          type: number
          format: float
          description: Available balance
          example: 1250.50
        createdAt:
          type: string
          format: date-time
          description: Card creation timestamp
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-16T14:20:00Z"
    
    CreateCardRequest:
      type: object
      required:
        - type
        - currency
      properties:
        type:
          type: string
          enum: [virtual, physical]
          description: Type of card to create
          example: "virtual"
        currency:
          type: string
          description: Card currency (ISO 4217)
          example: "USD"
        initialBalance:
          type: number
          format: float
          description: Initial card balance
          example: 100.00
          minimum: 0
    
    UpdateCardRequest:
      type: object
      properties:
        status:
          type: string
          enum: [active, inactive, blocked]
          description: New card status
          example: "active"
    
    CardListResponse:
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
        total:
          type: integer
          description: Total number of cards
          example: 5
        limit:
          type: integer
          description: Number of cards per page
          example: 20
        offset:
          type: integer
          description: Number of cards skipped
          example: 0
    
    Transaction:
      type: object
      properties:
        id:
          type: string
          description: Unique transaction identifier
          example: "txn_789xyz123abc"
        cardId:
          type: string
          description: Card used for transaction
          example: "card_123abc456def"
        amount:
          type: number
          format: float
          description: Transaction amount
          example: 25.99
        currency:
          type: string
          description: Transaction currency (ISO 4217)
          example: "USD"
        status:
          type: string
          enum: [pending, completed, failed, cancelled]
          description: Transaction status
          example: "completed"
        merchant:
          type: string
          description: Merchant name
          example: "Coffee Shop ABC"
        category:
          type: string
          description: Transaction category
          example: "Food & Dining"
        entroReward:
          type: number
          format: float
          description: ENTRO tokens earned from this transaction
          example: 0.25
        createdAt:
          type: string
          format: date-time
          description: Transaction timestamp
          example: "2024-01-15T10:30:00Z"
    
    TransactionListResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        total:
          type: integer
          description: Total number of transactions
          example: 150
        limit:
          type: integer
          description: Number of transactions per page
          example: 20
        offset:
          type: integer
          description: Number of transactions skipped
          example: 0
    
    EntroBalanceResponse:
      type: object
      properties:
        balance:
          type: number
          format: float
          description: Current ENTRO token balance
          example: 125.50
        lockedBalance:
          type: number
          format: float
          description: Locked ENTRO tokens (e.g., staking)
          example: 50.00
        availableBalance:
          type: number
          format: float
          description: Available ENTRO tokens for transactions
          example: 75.50
        lastUpdated:
          type: string
          format: date-time
          description: Last balance update timestamp
          example: "2024-01-15T10:30:00Z"
    
    EntroRewardsResponse:
      type: object
      properties:
        totalEarned:
          type: number
          format: float
          description: Total ENTRO tokens earned
          example: 25.75
        rewardHistory:
          type: array
          items:
            type: object
            properties:
              transactionId:
                type: string
                description: Related transaction ID
                example: "txn_789xyz123abc"
              amount:
                type: number
                format: float
                description: ENTRO tokens earned
                example: 0.25
              multiplier:
                type: number
                format: float
                description: Reward multiplier applied
                example: 1.5
              earnedAt:
                type: string
                format: date-time
                description: Reward earning timestamp
                example: "2024-01-15T10:30:00Z"
        period:
          type: object
          properties:
            start:
              type: string
              format: date-time
              example: "2024-01-01T00:00:00Z"
            end:
              type: string
              format: date-time
              example: "2024-01-31T23:59:59Z"
    
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type
          example: "validation_error"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid card type provided"
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-01-15T10:30:00Z"
        requestId:
          type: string
          description: Unique request identifier for debugging
          example: "req_456def789ghi"

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "unauthorized"
            message: "Invalid or missing authentication token"
            timestamp: "2024-01-15T10:30:00Z"
            requestId: "req_456def789ghi"
    
    BadRequestError:
      description: The request was invalid or cannot be served
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "bad_request"
            message: "Required field 'type' is missing"
            timestamp: "2024-01-15T10:30:00Z"
            requestId: "req_456def789ghi"
    
    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "not_found"
            message: "Card not found"
            timestamp: "2024-01-15T10:30:00Z"
            requestId: "req_456def789ghi"
    
    RateLimitError:
      description: Too many requests, rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "rate_limit_exceeded"
            message: "Rate limit of 1000 requests per hour exceeded"
            timestamp: "2024-01-15T10:30:00Z"
            requestId: "req_456def789ghi"
      headers:
        X-RateLimit-Limit:
          description: The number of allowed requests in the current period
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: The number of remaining requests in the current period
          schema:
            type: integer
        X-RateLimit-Reset:
          description: The time at which the current rate limit window resets in UTC epoch seconds
          schema:
            type: integer

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication. Include the token in the Authorization header:
        
        ```
        Authorization: Bearer <your-jwt-token>
        ```
        
        To obtain a JWT token, please contact our API support team.

security:
  - bearerAuth: []

tags:
  - name: System
    description: System status and health endpoints
  - name: Cards
    description: Card management operations
  - name: Transactions
    description: Transaction history and details
  - name: ENTRO Token
    description: ENTRO token balance and rewards
